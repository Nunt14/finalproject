// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô SQL ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies
import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‡∏≠‡πà‡∏≤‡∏ô environment variables
const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY; // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ service role key

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö SUPABASE_URL ‡∏´‡∏£‡∏∑‡∏≠ SUPABASE_SERVICE_ROLE_KEY');
  console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° SUPABASE_SERVICE_ROLE_KEY ‡πÉ‡∏ô .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixRLSPolicies() {
  try {
    console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies...\n');

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå SQL
    const sqlPath = path.join(__dirname, '../sql/fix_trip_member_rls_recursion.sql');
    const sqlContent = fs.readFileSync(sqlPath, 'utf8');

    // ‡πÅ‡∏ö‡πà‡∏á SQL statements (‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° semicolon)
    const statements = sqlContent
      .split(';')
      .map(s => s.trim())
      .filter(s => s && !s.startsWith('--'));

    // ‡∏£‡∏±‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ statement
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      if (!statement) continue;

      console.log(`üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô statement ${i + 1}/${statements.length}...`);
      
      const { data, error } = await supabase.rpc('exec_sql', {
        sql_query: statement
      });

      if (error) {
        console.error(`‚ùå Error ‡∏ó‡∏µ‡πà statement ${i + 1}:`, error.message);
        // ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö raw query
        const { error: rawError } = await supabase
          .from('_sql')
          .select('*')
          .limit(0);
        
        if (rawError) {
          console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô SQL ‡πÑ‡∏î‡πâ:', rawError);
        }
      } else {
        console.log(`‚úÖ Statement ${i + 1} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      }
    }

    console.log('\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç RLS policies ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
    console.log('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    process.exit(1);
  }
}

fixRLSPolicies();
